{"ast":null,"code":"const {\n  trimCharacter\n} = require('./helper'); // eslint-disable-next-line no-unused-vars\n\n\nconst {\n  StackItem,\n  BlockStackItem,\n  TableCellStackItem,\n  TableRowStackItem,\n  TableStackItem,\n  TransformerStackItem\n} = require('./stack-item');\n\nconst {\n  tableToString\n} = require('./table-printer');\n\nconst {\n  WhitespaceProcessor\n} = require('./whitespace-processor'); // eslint-disable-next-line import/no-unassigned-import\n\n\nrequire('./typedefs');\n/**\n * Helps to build text from inline and block elements.\n *\n * @class BlockTextBuilder\n */\n\n\nclass BlockTextBuilder {\n  /**\n   * Creates an instance of BlockTextBuilder.\n   *\n   * @param { Options } options HtmlToText options.\n   */\n  constructor(options) {\n    this.options = options;\n    this.whitepaceProcessor = new WhitespaceProcessor(options);\n    /** @type { StackItem } */\n\n    this._stackItem = new BlockStackItem(options);\n    /** @type { TransformerStackItem } */\n\n    this._wordTransformer = undefined;\n  }\n  /**\n   * Put a word-by-word transform function onto the transformations stack.\n   *\n   * Mainly used for uppercasing. Can be bypassed to add unformatted text such as URLs.\n   *\n   * Word transformations applied before wrapping.\n   *\n   * @param { (str: string) => string } wordTransform Word transformation function.\n   */\n\n\n  pushWordTransform(wordTransform) {\n    this._wordTransformer = new TransformerStackItem(this._wordTransformer, wordTransform);\n  }\n  /**\n   * Remove a function from the word transformations stack.\n   *\n   * @returns { (str: string) => string } A function that was removed.\n   */\n\n\n  popWordTransform() {\n    if (!this._wordTransformer) {\n      return undefined;\n    }\n\n    const transform = this._wordTransformer.transform;\n    this._wordTransformer = this._wordTransformer.next;\n    return transform;\n  }\n  /** @returns { (str: string) => string } */\n\n\n  _getCombinedWordTransformer() {\n    const applyTransformer = (str, transformer) => transformer ? applyTransformer(transformer.transform(str), transformer.next) : str;\n\n    return str => applyTransformer(str, this._wordTransformer);\n  }\n\n  _popStackItem() {\n    const item = this._stackItem;\n    this._stackItem = item.next;\n    return item;\n  }\n  /**\n   * Add a line break into currently built block.\n   */\n\n\n  addLineBreak() {\n    if (!(this._stackItem instanceof BlockStackItem || this._stackItem instanceof TableCellStackItem)) {\n      return;\n    }\n\n    if (this._stackItem.isPre) {\n      this._stackItem.rawText += '\\n';\n    } else {\n      this._stackItem.inlineTextBuilder.startNewLine();\n    }\n  }\n  /**\n   * Allow to break line in case directly following text will not fit.\n   */\n\n\n  addWordBreakOpportunity() {\n    if (this._stackItem instanceof BlockStackItem || this._stackItem instanceof TableCellStackItem) {\n      this._stackItem.inlineTextBuilder.wordBreakOpportunity = true;\n    }\n  }\n  /**\n   * Add a node inline into the currently built block.\n   *\n   * @param { string } str\n   * Text content of a node to add.\n   *\n   * @param { object | boolean } [ optionsObjectOrNoWordTransform ]\n   * Object holding the parameters of the operation.\n   *\n   * Boolean value is deprecated.\n   *\n   * @param { boolean } [ optionsObjectOrNoWordTransform.noWordTransform = false ]\n   * Ignore word transformers if there are any.\n   */\n\n\n  addInline(str, optionsObjectOrNoWordTransform = {}) {\n    if (typeof optionsObjectOrNoWordTransform === 'object') {\n      this._addInline(str, optionsObjectOrNoWordTransform);\n    } else {\n      this._addInline(str, {\n        noWordTransform: optionsObjectOrNoWordTransform\n      });\n    }\n  }\n\n  _addInline(str, {\n    noWordTransform = false\n  } = {}) {\n    if (!(this._stackItem instanceof BlockStackItem || this._stackItem instanceof TableCellStackItem)) {\n      return;\n    }\n\n    if (this._stackItem.isPre) {\n      this._stackItem.rawText += str;\n      return;\n    }\n\n    if (this.whitepaceProcessor.testContainsWords(str) || // There are words to add;\n    str.length && !this._stackItem.stashedLineBreaks // or at least spaces to take into account.\n    ) {\n        if (this._stackItem.stashedLineBreaks) {\n          this._stackItem.inlineTextBuilder.startNewLine(this._stackItem.stashedLineBreaks);\n        }\n\n        this.whitepaceProcessor.shrinkWrapAdd(str, this._stackItem.inlineTextBuilder, this._wordTransformer && !noWordTransform ? this._getCombinedWordTransformer() : undefined);\n        this._stackItem.stashedLineBreaks = 0; // inline text doesn't introduce line breaks\n      }\n  }\n  /**\n   * Start building a new block.\n   *\n   * @param { object | number } [optionsObjectOrLeadingLineBreaks]\n   * Object holding the parameters of the block.\n   *\n   * Number value is deprecated.\n   *\n   * @param { number }  [optionsObjectOrLeadingLineBreaks.leadingLineBreaks = 1]\n   * This block should have at least this number of line breaks to separate if from any preceding block.\n   *\n   * @param { number }  [optionsObjectOrLeadingLineBreaks.reservedLineLength = 0]\n   * Reserve this number of characters on each line for block markup.\n   *\n   * @param { boolean } [optionsObjectOrLeadingLineBreaks.isPre = false]\n   * Should HTML whitespace be preserved inside this block.\n   *\n   * @param { number }  [reservedLineLength]\n   * Deprecated.\n   *\n   * @param { boolean } [isPre]\n   * Deprecated.\n   */\n\n\n  openBlock(optionsObjectOrLeadingLineBreaks = {}, reservedLineLength = undefined, isPre = undefined) {\n    if (typeof optionsObjectOrLeadingLineBreaks === 'object') {\n      this._openBlock(optionsObjectOrLeadingLineBreaks);\n    } else {\n      this._openBlock({\n        isPre: isPre,\n        leadingLineBreaks: optionsObjectOrLeadingLineBreaks,\n        reservedLineLength: reservedLineLength\n      });\n    }\n  }\n\n  _openBlock({\n    leadingLineBreaks = 1,\n    reservedLineLength = 0,\n    isPre = false\n  } = {}) {\n    const maxLineLength = Math.max(20, this._stackItem.inlineTextBuilder.maxLineLength - reservedLineLength);\n    this._stackItem = new BlockStackItem(this.options, this._stackItem, leadingLineBreaks, maxLineLength);\n\n    if (isPre) {\n      this._stackItem.isPre = true;\n    }\n  }\n  /**\n   * Finalize currently built block, add it's content to the parent block.\n   *\n   * @param { object | number }         [optionsObjectOrTrailingLineBreaks]\n   * Object holding the parameters of the block.\n   *\n   * Number value is deprecated.\n   *\n   * @param { number }                  [optionsObjectOrTrailingLineBreaks.trailingLineBreaks = 1]\n   * This block should have at least this number of line breaks to separate it from any following block.\n   *\n   * @param { (str: string) => string } [optionsObjectOrTrailingLineBreaks.blockTransform = undefined]\n   * A function to transform the block text before adding to the parent block.\n   * This happens after word wrap and should be used in combination with reserved line length\n   * in order to keep line lengths correct.\n   * Used for whole block markup.\n   *\n   * @param { (str: string) => string } [blockTransform]\n   * Deprecated.\n   */\n\n\n  closeBlock(optionsObjectOrTrailingLineBreaks = {}, blockTransform = undefined) {\n    if (typeof optionsObjectOrTrailingLineBreaks === 'object') {\n      this._closeBlock(optionsObjectOrTrailingLineBreaks);\n    } else {\n      this._closeBlock({\n        trailingLineBreaks: optionsObjectOrTrailingLineBreaks,\n        blockTransform: blockTransform\n      });\n    }\n  }\n\n  _closeBlock({\n    trailingLineBreaks = 1,\n    blockTransform = undefined\n  } = {}) {\n    const block = this._popStackItem();\n\n    const blockText = blockTransform ? blockTransform(getText(block)) : getText(block);\n    addText(this._stackItem, blockText, block.leadingLineBreaks, Math.max(block.stashedLineBreaks, trailingLineBreaks));\n  }\n  /**\n   * Start building a table.\n   */\n\n\n  openTable() {\n    this._stackItem = new TableStackItem(this._stackItem);\n  }\n  /**\n   * Start building a table row.\n   */\n\n\n  openTableRow() {\n    if (!(this._stackItem instanceof TableStackItem)) {\n      throw new Error('Can\\'t add table row to something that is not a table! Check the formatter.');\n    }\n\n    this._stackItem = new TableRowStackItem(this._stackItem);\n  }\n  /**\n   * Start building a table cell.\n   *\n   * @param { object | number } [optionsObjectOrMaxColumnWidth = undefined]\n   * Object holding the parameters of the cell.\n   *\n   * Number value is deprecated.\n   *\n   * @param { number } [optionsObjectOrMaxColumnWidth.maxColumnWidth = undefined]\n   * Wrap cell content to this width. Fall back to global wordwrap value if undefined.\n   */\n\n\n  openTableCell(optionsObjectOrMaxColumnWidth = {}) {\n    if (typeof optionsObjectOrMaxColumnWidth === 'object') {\n      this._openTableCell(optionsObjectOrMaxColumnWidth);\n    } else {\n      this._openTableCell({\n        maxColumnWidth: optionsObjectOrMaxColumnWidth\n      });\n    }\n  }\n\n  _openTableCell({\n    maxColumnWidth = undefined\n  } = {}) {\n    if (!(this._stackItem instanceof TableRowStackItem)) {\n      throw new Error('Can\\'t add table cell to something that is not a table row! Check the formatter.');\n    }\n\n    this._stackItem = new TableCellStackItem(this.options, this._stackItem, maxColumnWidth);\n  }\n  /**\n   * Finalize currently built table cell and add it to parent table row's cells.\n   *\n   * @param { object | number } [optionsObjectOrColspan]\n   * Object holding the parameters of the cell.\n   *\n   * Number value is deprecated.\n   *\n   * @param { number } [optionsObjectOrColspan.colspan = 1] How many columns this cell should occupy.\n   * @param { number } [optionsObjectOrColspan.rowspan = 1] How many rows this cell should occupy.\n   *\n   * @param { number } [rowspan] Deprecated.\n   */\n\n\n  closeTableCell(optionsObjectOrColspan = {}, rowspan = undefined) {\n    if (typeof optionsObjectOrColspan === 'object') {\n      this._closeTableCell(optionsObjectOrColspan);\n    } else {\n      this._closeTableCell({\n        colspan: optionsObjectOrColspan,\n        rowspan: rowspan\n      });\n    }\n  }\n\n  _closeTableCell({\n    colspan = 1,\n    rowspan = 1\n  } = {}) {\n    const cell = this._popStackItem();\n\n    const text = trimCharacter(getText(cell), '\\n');\n    cell.next.cells.push({\n      colspan: colspan,\n      rowspan: rowspan,\n      text: text\n    });\n  }\n  /**\n   * Finalize currently built table row and add it to parent table's rows.\n   */\n\n\n  closeTableRow() {\n    const row = this._popStackItem();\n\n    row.next.rows.push(row.cells);\n  }\n  /**\n   * Finalize currently built table and add the rendered text to the parent block.\n   *\n   * @param { object | number } [optionsObjectOrColSpacing]\n   * Object holding the parameters of the table.\n   *\n   * Number value is depreceted.\n   *\n   * @param { number } [optionsObjectOrColSpacing.colSpacing = 3]\n   * Number of spaces between table columns.\n   *\n   * @param { number } [optionsObjectOrColSpacing.rowSpacing = 0]\n   * Number of empty lines between table rows.\n   *\n   * @param { number } [optionsObjectOrColSpacing.leadingLineBreaks = 2]\n   * This table should have at least this number of line breaks to separate if from any preceding block.\n   *\n   * @param { number } [optionsObjectOrColSpacing.trailingLineBreaks = 2]\n   * This table should have at least this number of line breaks to separate it from any following block.\n   *\n   * @param { number } [rowSpacing]\n   * Deprecated.\n   *\n   * @param { number } [leadingLineBreaks]\n   * Deprecated.\n   *\n   * @param { number } [trailingLineBreaks]\n   * Deprecated.\n   */\n\n\n  closeTable(optionsObjectOrColSpacing = {}, rowSpacing = undefined, leadingLineBreaks = undefined, trailingLineBreaks = undefined) {\n    if (typeof optionsObjectOrColSpacing === 'object') {\n      this._closeTable(optionsObjectOrColSpacing);\n    } else {\n      this._closeTable({\n        colSpacing: optionsObjectOrColSpacing,\n        leadingLineBreaks: leadingLineBreaks,\n        rowSpacing: rowSpacing,\n        trailingLineBreaks: trailingLineBreaks\n      });\n    }\n  }\n\n  _closeTable({\n    colSpacing = 3,\n    rowSpacing = 0,\n    leadingLineBreaks = 2,\n    trailingLineBreaks = 2\n  } = {}) {\n    const table = this._popStackItem();\n\n    const output = tableToString(table.rows, rowSpacing, colSpacing);\n\n    if (output) {\n      addText(this._stackItem, output, leadingLineBreaks, trailingLineBreaks);\n    }\n  }\n  /**\n   * Return the rendered text content of this builder.\n   *\n   * @returns { string }\n   */\n\n\n  toString() {\n    return getText(this._stackItem.getRoot()); // There should only be the root item if everything is closed properly.\n  }\n\n}\n\nfunction getText(stackItem) {\n  if (!(stackItem instanceof BlockStackItem || stackItem instanceof TableCellStackItem)) {\n    throw new Error('Only blocks and table cells can be requested for text contents.');\n  }\n\n  return stackItem.inlineTextBuilder.isEmpty() ? stackItem.rawText : stackItem.rawText + stackItem.inlineTextBuilder.toString();\n}\n\nfunction addText(stackItem, text, leadingLineBreaks, trailingLineBreaks) {\n  if (!(stackItem instanceof BlockStackItem || stackItem instanceof TableCellStackItem)) {\n    throw new Error('Only blocks and table cells can contain text.');\n  }\n\n  const parentText = getText(stackItem);\n  const lineBreaks = Math.max(stackItem.stashedLineBreaks, leadingLineBreaks);\n  stackItem.inlineTextBuilder.clear();\n\n  if (parentText) {\n    stackItem.rawText = parentText + '\\n'.repeat(lineBreaks) + text;\n  } else {\n    stackItem.rawText = text;\n    stackItem.leadingLineBreaks = lineBreaks;\n  }\n\n  stackItem.stashedLineBreaks = trailingLineBreaks;\n}\n\nmodule.exports = {\n  BlockTextBuilder: BlockTextBuilder\n};","map":{"version":3,"sources":["D:/Documents/HKII_2020_2021/Tieu_Luan_CN/code/tlcn/client/node_modules/html-to-text/lib/block-text-builder.js"],"names":["trimCharacter","require","StackItem","BlockStackItem","TableCellStackItem","TableRowStackItem","TableStackItem","TransformerStackItem","tableToString","WhitespaceProcessor","BlockTextBuilder","constructor","options","whitepaceProcessor","_stackItem","_wordTransformer","undefined","pushWordTransform","wordTransform","popWordTransform","transform","next","_getCombinedWordTransformer","applyTransformer","str","transformer","_popStackItem","item","addLineBreak","isPre","rawText","inlineTextBuilder","startNewLine","addWordBreakOpportunity","wordBreakOpportunity","addInline","optionsObjectOrNoWordTransform","_addInline","noWordTransform","testContainsWords","length","stashedLineBreaks","shrinkWrapAdd","openBlock","optionsObjectOrLeadingLineBreaks","reservedLineLength","_openBlock","leadingLineBreaks","maxLineLength","Math","max","closeBlock","optionsObjectOrTrailingLineBreaks","blockTransform","_closeBlock","trailingLineBreaks","block","blockText","getText","addText","openTable","openTableRow","Error","openTableCell","optionsObjectOrMaxColumnWidth","_openTableCell","maxColumnWidth","closeTableCell","optionsObjectOrColspan","rowspan","_closeTableCell","colspan","cell","text","cells","push","closeTableRow","row","rows","closeTable","optionsObjectOrColSpacing","rowSpacing","_closeTable","colSpacing","table","output","toString","getRoot","stackItem","isEmpty","parentText","lineBreaks","clear","repeat","module","exports"],"mappings":"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","sourcesContent":["\nconst { trimCharacter } = require('./helper');\n// eslint-disable-next-line no-unused-vars\nconst { StackItem, BlockStackItem, TableCellStackItem, TableRowStackItem, TableStackItem, TransformerStackItem }\n  = require('./stack-item');\nconst { tableToString } = require('./table-printer');\nconst { WhitespaceProcessor } = require('./whitespace-processor');\n\n// eslint-disable-next-line import/no-unassigned-import\nrequire('./typedefs');\n\n\n/**\n * Helps to build text from inline and block elements.\n *\n * @class BlockTextBuilder\n */\nclass BlockTextBuilder {\n\n  /**\n   * Creates an instance of BlockTextBuilder.\n   *\n   * @param { Options } options HtmlToText options.\n   */\n  constructor (options) {\n    this.options = options;\n    this.whitepaceProcessor = new WhitespaceProcessor(options);\n    /** @type { StackItem } */\n    this._stackItem = new BlockStackItem(options);\n    /** @type { TransformerStackItem } */\n    this._wordTransformer = undefined;\n  }\n\n  /**\n   * Put a word-by-word transform function onto the transformations stack.\n   *\n   * Mainly used for uppercasing. Can be bypassed to add unformatted text such as URLs.\n   *\n   * Word transformations applied before wrapping.\n   *\n   * @param { (str: string) => string } wordTransform Word transformation function.\n   */\n  pushWordTransform (wordTransform) {\n    this._wordTransformer = new TransformerStackItem(this._wordTransformer, wordTransform);\n  }\n\n  /**\n   * Remove a function from the word transformations stack.\n   *\n   * @returns { (str: string) => string } A function that was removed.\n   */\n  popWordTransform () {\n    if (!this._wordTransformer) { return undefined; }\n    const transform = this._wordTransformer.transform;\n    this._wordTransformer = this._wordTransformer.next;\n    return transform;\n  }\n\n  /** @returns { (str: string) => string } */\n  _getCombinedWordTransformer () {\n    const applyTransformer = (str, transformer) =>\n      ((transformer) ? applyTransformer(transformer.transform(str), transformer.next) : str);\n    return (str) => applyTransformer(str, this._wordTransformer);\n  }\n\n  _popStackItem () {\n    const item = this._stackItem;\n    this._stackItem = item.next;\n    return item;\n  }\n\n  /**\n   * Add a line break into currently built block.\n   */\n  addLineBreak () {\n    if (!(\n      this._stackItem instanceof BlockStackItem\n      || this._stackItem instanceof TableCellStackItem\n    )) { return; }\n    if (this._stackItem.isPre) {\n      this._stackItem.rawText += '\\n';\n    } else {\n      this._stackItem.inlineTextBuilder.startNewLine();\n    }\n  }\n\n  /**\n   * Allow to break line in case directly following text will not fit.\n   */\n  addWordBreakOpportunity () {\n    if (\n      this._stackItem instanceof BlockStackItem\n      || this._stackItem instanceof TableCellStackItem\n    ) {\n      this._stackItem.inlineTextBuilder.wordBreakOpportunity = true;\n    }\n  }\n\n  /**\n   * Add a node inline into the currently built block.\n   *\n   * @param { string } str\n   * Text content of a node to add.\n   *\n   * @param { object | boolean } [ optionsObjectOrNoWordTransform ]\n   * Object holding the parameters of the operation.\n   *\n   * Boolean value is deprecated.\n   *\n   * @param { boolean } [ optionsObjectOrNoWordTransform.noWordTransform = false ]\n   * Ignore word transformers if there are any.\n   */\n  addInline (str, optionsObjectOrNoWordTransform = {}) {\n    if (typeof optionsObjectOrNoWordTransform === 'object') {\n      this._addInline(str, optionsObjectOrNoWordTransform);\n    } else {\n      this._addInline(str, { noWordTransform: optionsObjectOrNoWordTransform });\n    }\n  }\n\n  _addInline (str, { noWordTransform = false } = {}) {\n    if (!(\n      this._stackItem instanceof BlockStackItem\n      || this._stackItem instanceof TableCellStackItem\n    )) { return; }\n\n    if (this._stackItem.isPre) {\n      this._stackItem.rawText += str;\n      return;\n    }\n\n    if (\n      this.whitepaceProcessor.testContainsWords(str) || // There are words to add;\n      (str.length && !this._stackItem.stashedLineBreaks) // or at least spaces to take into account.\n    ) {\n      if (this._stackItem.stashedLineBreaks) {\n        this._stackItem.inlineTextBuilder.startNewLine(this._stackItem.stashedLineBreaks);\n      }\n      this.whitepaceProcessor.shrinkWrapAdd(\n        str,\n        this._stackItem.inlineTextBuilder,\n        (this._wordTransformer && !noWordTransform) ? this._getCombinedWordTransformer() : undefined\n      );\n      this._stackItem.stashedLineBreaks = 0; // inline text doesn't introduce line breaks\n    }\n  }\n\n  /**\n   * Start building a new block.\n   *\n   * @param { object | number } [optionsObjectOrLeadingLineBreaks]\n   * Object holding the parameters of the block.\n   *\n   * Number value is deprecated.\n   *\n   * @param { number }  [optionsObjectOrLeadingLineBreaks.leadingLineBreaks = 1]\n   * This block should have at least this number of line breaks to separate if from any preceding block.\n   *\n   * @param { number }  [optionsObjectOrLeadingLineBreaks.reservedLineLength = 0]\n   * Reserve this number of characters on each line for block markup.\n   *\n   * @param { boolean } [optionsObjectOrLeadingLineBreaks.isPre = false]\n   * Should HTML whitespace be preserved inside this block.\n   *\n   * @param { number }  [reservedLineLength]\n   * Deprecated.\n   *\n   * @param { boolean } [isPre]\n   * Deprecated.\n   */\n  openBlock (optionsObjectOrLeadingLineBreaks = {}, reservedLineLength = undefined, isPre = undefined) {\n    if (typeof optionsObjectOrLeadingLineBreaks === 'object') {\n      this._openBlock(optionsObjectOrLeadingLineBreaks);\n    } else {\n      this._openBlock({\n        isPre: isPre,\n        leadingLineBreaks: optionsObjectOrLeadingLineBreaks,\n        reservedLineLength: reservedLineLength,\n      });\n    }\n  }\n\n  _openBlock ({ leadingLineBreaks = 1, reservedLineLength = 0, isPre = false } = {}) {\n    const maxLineLength = Math.max(20, this._stackItem.inlineTextBuilder.maxLineLength - reservedLineLength);\n    this._stackItem = new BlockStackItem(\n      this.options,\n      this._stackItem,\n      leadingLineBreaks,\n      maxLineLength\n    );\n    if (isPre) { this._stackItem.isPre = true; }\n  }\n\n  /**\n   * Finalize currently built block, add it's content to the parent block.\n   *\n   * @param { object | number }         [optionsObjectOrTrailingLineBreaks]\n   * Object holding the parameters of the block.\n   *\n   * Number value is deprecated.\n   *\n   * @param { number }                  [optionsObjectOrTrailingLineBreaks.trailingLineBreaks = 1]\n   * This block should have at least this number of line breaks to separate it from any following block.\n   *\n   * @param { (str: string) => string } [optionsObjectOrTrailingLineBreaks.blockTransform = undefined]\n   * A function to transform the block text before adding to the parent block.\n   * This happens after word wrap and should be used in combination with reserved line length\n   * in order to keep line lengths correct.\n   * Used for whole block markup.\n   *\n   * @param { (str: string) => string } [blockTransform]\n   * Deprecated.\n   */\n  closeBlock (optionsObjectOrTrailingLineBreaks = {}, blockTransform = undefined) {\n    if (typeof optionsObjectOrTrailingLineBreaks === 'object') {\n      this._closeBlock(optionsObjectOrTrailingLineBreaks);\n    } else {\n      this._closeBlock({\n        trailingLineBreaks: optionsObjectOrTrailingLineBreaks,\n        blockTransform: blockTransform,\n      });\n    }\n  }\n\n  _closeBlock ({ trailingLineBreaks = 1, blockTransform = undefined } = {}) {\n    const block = this._popStackItem();\n    const blockText = (blockTransform) ? blockTransform(getText(block)) : getText(block);\n    addText(this._stackItem, blockText, block.leadingLineBreaks, Math.max(block.stashedLineBreaks, trailingLineBreaks));\n  }\n\n  /**\n   * Start building a table.\n   */\n  openTable () {\n    this._stackItem = new TableStackItem(this._stackItem);\n  }\n\n  /**\n   * Start building a table row.\n   */\n  openTableRow () {\n    if (!(this._stackItem instanceof TableStackItem)) {\n      throw new Error('Can\\'t add table row to something that is not a table! Check the formatter.');\n    }\n    this._stackItem = new TableRowStackItem(this._stackItem);\n  }\n\n  /**\n   * Start building a table cell.\n   *\n   * @param { object | number } [optionsObjectOrMaxColumnWidth = undefined]\n   * Object holding the parameters of the cell.\n   *\n   * Number value is deprecated.\n   *\n   * @param { number } [optionsObjectOrMaxColumnWidth.maxColumnWidth = undefined]\n   * Wrap cell content to this width. Fall back to global wordwrap value if undefined.\n   */\n  openTableCell (optionsObjectOrMaxColumnWidth = {}) {\n    if (typeof optionsObjectOrMaxColumnWidth === 'object') {\n      this._openTableCell(optionsObjectOrMaxColumnWidth);\n    } else {\n      this._openTableCell({ maxColumnWidth: optionsObjectOrMaxColumnWidth });\n    }\n  }\n\n  _openTableCell ({ maxColumnWidth = undefined } = {}) {\n    if (!(this._stackItem instanceof TableRowStackItem)) {\n      throw new Error('Can\\'t add table cell to something that is not a table row! Check the formatter.');\n    }\n    this._stackItem = new TableCellStackItem(this.options, this._stackItem, maxColumnWidth);\n  }\n\n  /**\n   * Finalize currently built table cell and add it to parent table row's cells.\n   *\n   * @param { object | number } [optionsObjectOrColspan]\n   * Object holding the parameters of the cell.\n   *\n   * Number value is deprecated.\n   *\n   * @param { number } [optionsObjectOrColspan.colspan = 1] How many columns this cell should occupy.\n   * @param { number } [optionsObjectOrColspan.rowspan = 1] How many rows this cell should occupy.\n   *\n   * @param { number } [rowspan] Deprecated.\n   */\n  closeTableCell (optionsObjectOrColspan = {}, rowspan = undefined) {\n    if (typeof optionsObjectOrColspan === 'object') {\n      this._closeTableCell(optionsObjectOrColspan);\n    } else {\n      this._closeTableCell({\n        colspan: optionsObjectOrColspan,\n        rowspan: rowspan,\n      });\n    }\n  }\n\n  _closeTableCell ({ colspan = 1, rowspan = 1 } = {}) {\n    const cell = this._popStackItem();\n    const text = trimCharacter(getText(cell), '\\n');\n    cell.next.cells.push({ colspan: colspan, rowspan: rowspan, text: text });\n  }\n\n  /**\n   * Finalize currently built table row and add it to parent table's rows.\n   */\n  closeTableRow () {\n    const row = this._popStackItem();\n    row.next.rows.push(row.cells);\n  }\n\n  /**\n   * Finalize currently built table and add the rendered text to the parent block.\n   *\n   * @param { object | number } [optionsObjectOrColSpacing]\n   * Object holding the parameters of the table.\n   *\n   * Number value is depreceted.\n   *\n   * @param { number } [optionsObjectOrColSpacing.colSpacing = 3]\n   * Number of spaces between table columns.\n   *\n   * @param { number } [optionsObjectOrColSpacing.rowSpacing = 0]\n   * Number of empty lines between table rows.\n   *\n   * @param { number } [optionsObjectOrColSpacing.leadingLineBreaks = 2]\n   * This table should have at least this number of line breaks to separate if from any preceding block.\n   *\n   * @param { number } [optionsObjectOrColSpacing.trailingLineBreaks = 2]\n   * This table should have at least this number of line breaks to separate it from any following block.\n   *\n   * @param { number } [rowSpacing]\n   * Deprecated.\n   *\n   * @param { number } [leadingLineBreaks]\n   * Deprecated.\n   *\n   * @param { number } [trailingLineBreaks]\n   * Deprecated.\n   */\n  closeTable (\n    optionsObjectOrColSpacing = {},\n    rowSpacing = undefined,\n    leadingLineBreaks = undefined,\n    trailingLineBreaks = undefined\n  ) {\n    if (typeof optionsObjectOrColSpacing === 'object') {\n      this._closeTable(optionsObjectOrColSpacing);\n    } else {\n      this._closeTable({\n        colSpacing: optionsObjectOrColSpacing,\n        leadingLineBreaks: leadingLineBreaks,\n        rowSpacing: rowSpacing,\n        trailingLineBreaks: trailingLineBreaks\n      });\n    }\n  }\n\n  _closeTable ({ colSpacing = 3, rowSpacing = 0, leadingLineBreaks = 2, trailingLineBreaks = 2 } = {}) {\n    const table = this._popStackItem();\n    const output = tableToString(table.rows, rowSpacing, colSpacing);\n    if (output) {\n      addText(this._stackItem, output, leadingLineBreaks, trailingLineBreaks);\n    }\n  }\n\n  /**\n   * Return the rendered text content of this builder.\n   *\n   * @returns { string }\n   */\n  toString () {\n    return getText(this._stackItem.getRoot());\n    // There should only be the root item if everything is closed properly.\n  }\n\n}\n\nfunction getText (stackItem) {\n  if (!(\n    stackItem instanceof BlockStackItem\n    || stackItem instanceof TableCellStackItem\n  )) {\n    throw new Error('Only blocks and table cells can be requested for text contents.');\n  }\n  return (stackItem.inlineTextBuilder.isEmpty())\n    ? stackItem.rawText\n    : stackItem.rawText + stackItem.inlineTextBuilder.toString();\n}\n\nfunction addText (stackItem, text, leadingLineBreaks, trailingLineBreaks) {\n  if (!(\n    stackItem instanceof BlockStackItem\n    || stackItem instanceof TableCellStackItem\n  )) {\n    throw new Error('Only blocks and table cells can contain text.');\n  }\n  const parentText = getText(stackItem);\n  const lineBreaks = Math.max(stackItem.stashedLineBreaks, leadingLineBreaks);\n  stackItem.inlineTextBuilder.clear();\n  if (parentText) {\n    stackItem.rawText = parentText + '\\n'.repeat(lineBreaks) + text;\n  } else {\n    stackItem.rawText = text;\n    stackItem.leadingLineBreaks = lineBreaks;\n  }\n  stackItem.stashedLineBreaks = trailingLineBreaks;\n}\n\nmodule.exports = { BlockTextBuilder: BlockTextBuilder };\n"]},"metadata":{},"sourceType":"script"}