{"ast":null,"code":"'use strict';\n\nvar alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split(''),\n    length = 64,\n    map = {},\n    seed = 0,\n    i = 0,\n    prev;\n/**\r\n * Return a string representing the specified number.\r\n *\r\n * @param {Number} num The number to convert.\r\n * @returns {String} The string representation of the number.\r\n * @api public\r\n */\n\nfunction encode(num) {\n  var encoded = '';\n\n  do {\n    encoded = alphabet[num % length] + encoded;\n    num = Math.floor(num / length);\n  } while (num > 0);\n\n  return encoded;\n}\n/**\r\n * Return the integer value specified by the given string.\r\n *\r\n * @param {String} str The string to convert.\r\n * @returns {Number} The integer value represented by the string.\r\n * @api public\r\n */\n\n\nfunction decode(str) {\n  var decoded = 0;\n\n  for (i = 0; i < str.length; i++) {\n    decoded = decoded * length + map[str.charAt(i)];\n  }\n\n  return decoded;\n}\n/**\r\n * Yeast: A tiny growing id generator.\r\n *\r\n * @returns {String} A unique id.\r\n * @api public\r\n */\n\n\nfunction yeast() {\n  var now = encode(+new Date());\n  if (now !== prev) return seed = 0, prev = now;\n  return now + '.' + encode(seed++);\n} //\n// Map each character to its index.\n//\n\n\nfor (; i < length; i++) map[alphabet[i]] = i; //\n// Expose the `yeast`, `encode` and `decode` functions.\n//\n\n\nyeast.encode = encode;\nyeast.decode = decode;\nmodule.exports = yeast;","map":{"version":3,"sources":["D:/Documents/HKII_2020_2021/Tieu_Luan_CN/code/test_tlcn/tlcn/client/node_modules/yeast/index.js"],"names":["alphabet","split","length","map","seed","i","prev","encode","num","encoded","Math","floor","decode","str","decoded","charAt","yeast","now","Date","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,QAAQ,GAAG,mEAAmEC,KAAnE,CAAyE,EAAzE,CAAf;AAAA,IACIC,MAAM,GAAG,EADb;AAAA,IAEIC,GAAG,GAAG,EAFV;AAAA,IAGIC,IAAI,GAAG,CAHX;AAAA,IAIIC,CAAC,GAAG,CAJR;AAAA,IAKIC,IALJ;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,MAAT,CAAgBC,GAAhB,EAAqB;AACnB,MAAIC,OAAO,GAAG,EAAd;;AAEA,KAAG;AACDA,IAAAA,OAAO,GAAGT,QAAQ,CAACQ,GAAG,GAAGN,MAAP,CAAR,GAAyBO,OAAnC;AACAD,IAAAA,GAAG,GAAGE,IAAI,CAACC,KAAL,CAAWH,GAAG,GAAGN,MAAjB,CAAN;AACD,GAHD,QAGSM,GAAG,GAAG,CAHf;;AAKA,SAAOC,OAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,MAAT,CAAgBC,GAAhB,EAAqB;AACnB,MAAIC,OAAO,GAAG,CAAd;;AAEA,OAAKT,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGQ,GAAG,CAACX,MAApB,EAA4BG,CAAC,EAA7B,EAAiC;AAC/BS,IAAAA,OAAO,GAAGA,OAAO,GAAGZ,MAAV,GAAmBC,GAAG,CAACU,GAAG,CAACE,MAAJ,CAAWV,CAAX,CAAD,CAAhC;AACD;;AAED,SAAOS,OAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,KAAT,GAAiB;AACf,MAAIC,GAAG,GAAGV,MAAM,CAAC,CAAC,IAAIW,IAAJ,EAAF,CAAhB;AAEA,MAAID,GAAG,KAAKX,IAAZ,EAAkB,OAAOF,IAAI,GAAG,CAAP,EAAUE,IAAI,GAAGW,GAAxB;AAClB,SAAOA,GAAG,GAAE,GAAL,GAAUV,MAAM,CAACH,IAAI,EAAL,CAAvB;AACD,C,CAED;AACA;AACA;;;AACA,OAAOC,CAAC,GAAGH,MAAX,EAAmBG,CAAC,EAApB,EAAwBF,GAAG,CAACH,QAAQ,CAACK,CAAD,CAAT,CAAH,GAAmBA,CAAnB,C,CAExB;AACA;AACA;;;AACAW,KAAK,CAACT,MAAN,GAAeA,MAAf;AACAS,KAAK,CAACJ,MAAN,GAAeA,MAAf;AACAO,MAAM,CAACC,OAAP,GAAiBJ,KAAjB","sourcesContent":["'use strict';\r\n\r\nvar alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split('')\r\n  , length = 64\r\n  , map = {}\r\n  , seed = 0\r\n  , i = 0\r\n  , prev;\r\n\r\n/**\r\n * Return a string representing the specified number.\r\n *\r\n * @param {Number} num The number to convert.\r\n * @returns {String} The string representation of the number.\r\n * @api public\r\n */\r\nfunction encode(num) {\r\n  var encoded = '';\r\n\r\n  do {\r\n    encoded = alphabet[num % length] + encoded;\r\n    num = Math.floor(num / length);\r\n  } while (num > 0);\r\n\r\n  return encoded;\r\n}\r\n\r\n/**\r\n * Return the integer value specified by the given string.\r\n *\r\n * @param {String} str The string to convert.\r\n * @returns {Number} The integer value represented by the string.\r\n * @api public\r\n */\r\nfunction decode(str) {\r\n  var decoded = 0;\r\n\r\n  for (i = 0; i < str.length; i++) {\r\n    decoded = decoded * length + map[str.charAt(i)];\r\n  }\r\n\r\n  return decoded;\r\n}\r\n\r\n/**\r\n * Yeast: A tiny growing id generator.\r\n *\r\n * @returns {String} A unique id.\r\n * @api public\r\n */\r\nfunction yeast() {\r\n  var now = encode(+new Date());\r\n\r\n  if (now !== prev) return seed = 0, prev = now;\r\n  return now +'.'+ encode(seed++);\r\n}\r\n\r\n//\r\n// Map each character to its index.\r\n//\r\nfor (; i < length; i++) map[alphabet[i]] = i;\r\n\r\n//\r\n// Expose the `yeast`, `encode` and `decode` functions.\r\n//\r\nyeast.encode = encode;\r\nyeast.decode = decode;\r\nmodule.exports = yeast;\r\n"]},"metadata":{},"sourceType":"script"}