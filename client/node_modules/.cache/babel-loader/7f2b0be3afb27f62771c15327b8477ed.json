{"ast":null,"code":"/**\r\n * Parses an URI\r\n *\r\n * @author Steven Levithan <stevenlevithan.com> (MIT license)\r\n * @api private\r\n */\nvar re = /^(?:(?![^:@]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\nvar parts = ['source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'];\n\nmodule.exports = function parseuri(str) {\n  var src = str,\n      b = str.indexOf('['),\n      e = str.indexOf(']');\n\n  if (b != -1 && e != -1) {\n    str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);\n  }\n\n  var m = re.exec(str || ''),\n      uri = {},\n      i = 14;\n\n  while (i--) {\n    uri[parts[i]] = m[i] || '';\n  }\n\n  if (b != -1 && e != -1) {\n    uri.source = src;\n    uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');\n    uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');\n    uri.ipv6uri = true;\n  }\n\n  uri.pathNames = pathNames(uri, uri['path']);\n  uri.queryKey = queryKey(uri, uri['query']);\n  return uri;\n};\n\nfunction pathNames(obj, path) {\n  var regx = /\\/{2,9}/g,\n      names = path.replace(regx, \"/\").split(\"/\");\n\n  if (path.substr(0, 1) == '/' || path.length === 0) {\n    names.splice(0, 1);\n  }\n\n  if (path.substr(path.length - 1, 1) == '/') {\n    names.splice(names.length - 1, 1);\n  }\n\n  return names;\n}\n\nfunction queryKey(uri, query) {\n  var data = {};\n  query.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function ($0, $1, $2) {\n    if ($1) {\n      data[$1] = $2;\n    }\n  });\n  return data;\n}","map":{"version":3,"sources":["D:/Documents/HKII_2020_2021/Tieu_Luan_CN/code/test_tlcn/tlcn/client/node_modules/parseuri/index.js"],"names":["re","parts","module","exports","parseuri","str","src","b","indexOf","e","substring","replace","length","m","exec","uri","i","source","host","authority","ipv6uri","pathNames","queryKey","obj","path","regx","names","split","substr","splice","query","data","$0","$1","$2"],"mappings":"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","sourcesContent":["/**\r\n * Parses an URI\r\n *\r\n * @author Steven Levithan <stevenlevithan.com> (MIT license)\r\n * @api private\r\n */\r\n\r\nvar re = /^(?:(?![^:@]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\r\n\r\nvar parts = [\r\n    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'\r\n];\r\n\r\nmodule.exports = function parseuri(str) {\r\n    var src = str,\r\n        b = str.indexOf('['),\r\n        e = str.indexOf(']');\r\n\r\n    if (b != -1 && e != -1) {\r\n        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);\r\n    }\r\n\r\n    var m = re.exec(str || ''),\r\n        uri = {},\r\n        i = 14;\r\n\r\n    while (i--) {\r\n        uri[parts[i]] = m[i] || '';\r\n    }\r\n\r\n    if (b != -1 && e != -1) {\r\n        uri.source = src;\r\n        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');\r\n        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');\r\n        uri.ipv6uri = true;\r\n    }\r\n\r\n    uri.pathNames = pathNames(uri, uri['path']);\r\n    uri.queryKey = queryKey(uri, uri['query']);\r\n\r\n    return uri;\r\n};\r\n\r\nfunction pathNames(obj, path) {\r\n    var regx = /\\/{2,9}/g,\r\n        names = path.replace(regx, \"/\").split(\"/\");\r\n\r\n    if (path.substr(0, 1) == '/' || path.length === 0) {\r\n        names.splice(0, 1);\r\n    }\r\n    if (path.substr(path.length - 1, 1) == '/') {\r\n        names.splice(names.length - 1, 1);\r\n    }\r\n\r\n    return names;\r\n}\r\n\r\nfunction queryKey(uri, query) {\r\n    var data = {};\r\n\r\n    query.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function ($0, $1, $2) {\r\n        if ($1) {\r\n            data[$1] = $2;\r\n        }\r\n    });\r\n\r\n    return data;\r\n}\r\n"]},"metadata":{},"sourceType":"script"}