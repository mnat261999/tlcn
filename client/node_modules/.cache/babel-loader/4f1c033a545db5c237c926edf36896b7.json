{"ast":null,"code":"/**\n * Split given tag selector into it's components.\n * Only element name, class names and ID names are supported.\n *\n * @param { string } selector Tag selector (\"tag.class#id\" etc).\n * @returns { { classes: string[], element: string, ids: string[] } }\n */\nfunction splitSelector(selector) {\n  function getParams(re, string) {\n    const captures = [];\n    let found;\n\n    while ((found = re.exec(string)) !== null) {\n      captures.push(found[1]);\n    }\n\n    return captures;\n  }\n\n  return {\n    classes: getParams(/\\.([\\d\\w-]*)/g, selector),\n    element: /(^\\w*)/g.exec(selector)[1],\n    ids: getParams(/#([\\d\\w-]*)/g, selector)\n  };\n}\n/**\n * Given a list of class and ID selectors (prefixed with '.' and '#'),\n * return them as separate lists of names without prefixes.\n *\n * @param { string[] } selectors Class and ID selectors (`[\".class\", \"#id\"]` etc).\n * @returns { { classes: string[], ids: string[] } }\n */\n\n\nfunction splitClassesAndIds(selectors) {\n  const classes = [];\n  const ids = [];\n\n  for (const selector of selectors) {\n    if (selector.startsWith('.')) {\n      classes.push(selector.substring(1));\n    } else if (selector.startsWith('#')) {\n      ids.push(selector.substring(1));\n    }\n  }\n\n  return {\n    classes: classes,\n    ids: ids\n  };\n}\n/**\n * Make a recursive function that will only run to a given depth\n * and switches to an alternative function at that depth. \\\n * No limitation if `n` is `undefined` (Just wraps `f` in that case).\n *\n * @param   { number | undefined } n   Allowed depth of recursion. `undefined` for no limitation.\n * @param   { Function }           f   Function that accepts recursive callback as the first argument.\n * @param   { Function }           [g] Function to run instead, when maximum depth was reached. Do nothing by default.\n * @returns { Function }\n */\n\n\nfunction limitedDepthRecursive(n, f, g = () => undefined) {\n  if (n === undefined) {\n    const f1 = function (...args) {\n      return f(f1, ...args);\n    };\n\n    return f1;\n  }\n\n  if (n >= 0) {\n    return function (...args) {\n      return f(limitedDepthRecursive(n - 1, f, g), ...args);\n    };\n  }\n\n  return g;\n}\n/**\n * Convert a number into alphabetic sequence representation (Sequence without zeroes).\n *\n * For example: `a, ..., z, aa, ..., zz, aaa, ...`.\n *\n * @param   { number } num              Number to convert. Must be >= 1.\n * @param   { string } [baseChar = 'a'] Character for 1 in the sequence.\n * @param   { number } [base = 26]      Number of characters in the sequence.\n * @returns { string }\n */\n\n\nfunction numberToLetterSequence(num, baseChar = 'a', base = 26) {\n  const digits = [];\n\n  do {\n    num -= 1;\n    digits.push(num % base);\n    num = num / base >> 0; // quick `floor`\n  } while (num > 0);\n\n  const baseCode = baseChar.charCodeAt(0);\n  return digits.reverse().map(n => String.fromCharCode(baseCode + n)).join('');\n}\n\nconst I = ['I', 'X', 'C', 'M'];\nconst V = ['V', 'L', 'D'];\n/**\n * Convert a number to it's Roman representation. No large numbers extension.\n *\n * @param   { number } num Number to convert. `0 < num <= 3999`.\n * @returns { string }\n */\n\nfunction numberToRoman(num) {\n  return [...(num + '')].map(n => +n).reverse().map((v, i) => v % 5 < 4 ? (v < 5 ? '' : V[i]) + I[i].repeat(v % 5) : I[i] + (v < 5 ? V[i] : I[i + 1])).reverse().join('');\n}\n/**\n * Return the same string or a substring with the given character occurences removed from each end if any.\n *\n * @param   { string } str  A string to trim.\n * @param   { string } char A character to be trimmed.\n * @returns { string }\n */\n\n\nfunction trimCharacter(str, char) {\n  let start = 0;\n  let end = str.length;\n\n  while (start < end && str[start] === char) {\n    ++start;\n  }\n\n  while (end > start && str[end - 1] === char) {\n    --end;\n  }\n\n  return start > 0 || end < str.length ? str.substring(start, end) : str;\n}\n/**\n * Get a nested property from an object.\n *\n * @param   { object }   obj  The object to query for the value.\n * @param   { string[] } path The path to the property.\n * @returns { any }\n */\n\n\nfunction get(obj, path) {\n  for (const key of path) {\n    if (!obj) {\n      return undefined;\n    }\n\n    obj = obj[key];\n  }\n\n  return obj;\n}\n/**\n * Set a nested property of an object.\n *\n * @param { object }   obj   The object to modify.\n * @param { string[] } path  The path to the property.\n * @param { any }      value The value to set.\n */\n\n\nfunction set(obj, path, value) {\n  const valueKey = path.pop();\n\n  for (const key of path) {\n    let nested = obj[key];\n\n    if (!nested) {\n      nested = {};\n      obj[key] = nested;\n    }\n\n    obj = nested;\n  }\n\n  obj[valueKey] = value;\n}\n\nmodule.exports = {\n  get: get,\n  limitedDepthRecursive: limitedDepthRecursive,\n  numberToLetterSequence: numberToLetterSequence,\n  numberToRoman: numberToRoman,\n  set: set,\n  splitClassesAndIds: splitClassesAndIds,\n  splitSelector: splitSelector,\n  trimCharacter: trimCharacter\n};","map":{"version":3,"sources":["D:/Documents/HKII_2020_2021/Tieu_Luan_CN/code/tlcn/client/node_modules/html-to-text/lib/helper.js"],"names":["splitSelector","selector","getParams","re","string","captures","found","exec","push","classes","element","ids","splitClassesAndIds","selectors","startsWith","substring","limitedDepthRecursive","n","f","g","undefined","f1","args","numberToLetterSequence","num","baseChar","base","digits","baseCode","charCodeAt","reverse","map","String","fromCharCode","join","I","V","numberToRoman","v","i","repeat","trimCharacter","str","char","start","end","length","get","obj","path","key","set","value","valueKey","pop","nested","module","exports"],"mappings":"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","sourcesContent":["\n/**\n * Split given tag selector into it's components.\n * Only element name, class names and ID names are supported.\n *\n * @param { string } selector Tag selector (\"tag.class#id\" etc).\n * @returns { { classes: string[], element: string, ids: string[] } }\n */\nfunction splitSelector (selector) {\n  function getParams (re, string) {\n    const captures = [];\n    let found;\n    while ((found = re.exec(string)) !== null) {\n      captures.push(found[1]);\n    }\n    return captures;\n  }\n\n  return {\n    classes: getParams(/\\.([\\d\\w-]*)/g, selector),\n    element: /(^\\w*)/g.exec(selector)[1],\n    ids: getParams(/#([\\d\\w-]*)/g, selector)\n  };\n}\n\n/**\n * Given a list of class and ID selectors (prefixed with '.' and '#'),\n * return them as separate lists of names without prefixes.\n *\n * @param { string[] } selectors Class and ID selectors (`[\".class\", \"#id\"]` etc).\n * @returns { { classes: string[], ids: string[] } }\n */\nfunction splitClassesAndIds (selectors) {\n  const classes = [];\n  const ids = [];\n  for (const selector of selectors) {\n    if (selector.startsWith('.')) {\n      classes.push(selector.substring(1));\n    } else if (selector.startsWith('#')) {\n      ids.push(selector.substring(1));\n    }\n  }\n  return { classes: classes, ids: ids };\n}\n\n/**\n * Make a recursive function that will only run to a given depth\n * and switches to an alternative function at that depth. \\\n * No limitation if `n` is `undefined` (Just wraps `f` in that case).\n *\n * @param   { number | undefined } n   Allowed depth of recursion. `undefined` for no limitation.\n * @param   { Function }           f   Function that accepts recursive callback as the first argument.\n * @param   { Function }           [g] Function to run instead, when maximum depth was reached. Do nothing by default.\n * @returns { Function }\n */\nfunction limitedDepthRecursive (n, f, g = () => undefined) {\n  if (n === undefined) {\n    const f1 = function (...args) { return f(f1, ...args); };\n    return f1;\n  }\n  if (n >= 0) {\n    return function (...args) { return f(limitedDepthRecursive(n - 1, f, g), ...args); };\n  }\n  return g;\n}\n\n/**\n * Convert a number into alphabetic sequence representation (Sequence without zeroes).\n *\n * For example: `a, ..., z, aa, ..., zz, aaa, ...`.\n *\n * @param   { number } num              Number to convert. Must be >= 1.\n * @param   { string } [baseChar = 'a'] Character for 1 in the sequence.\n * @param   { number } [base = 26]      Number of characters in the sequence.\n * @returns { string }\n */\nfunction numberToLetterSequence (num, baseChar = 'a', base = 26) {\n  const digits = [];\n  do {\n    num -= 1;\n    digits.push(num % base);\n    num = (num / base) >> 0; // quick `floor`\n  } while (num > 0);\n  const baseCode = baseChar.charCodeAt(0);\n  return digits\n    .reverse()\n    .map(n => String.fromCharCode(baseCode + n))\n    .join('');\n}\n\nconst I = ['I', 'X', 'C', 'M'];\nconst V = ['V', 'L', 'D'];\n\n/**\n * Convert a number to it's Roman representation. No large numbers extension.\n *\n * @param   { number } num Number to convert. `0 < num <= 3999`.\n * @returns { string }\n */\nfunction numberToRoman (num) {\n  return [...(num) + '']\n    .map(n => +n)\n    .reverse()\n    .map((v, i) => ((v % 5 < 4)\n      ? (v < 5 ? '' : V[i]) + I[i].repeat(v % 5)\n      : I[i] + (v < 5 ? V[i] : I[i + 1])))\n    .reverse()\n    .join('');\n}\n\n/**\n * Return the same string or a substring with the given character occurences removed from each end if any.\n *\n * @param   { string } str  A string to trim.\n * @param   { string } char A character to be trimmed.\n * @returns { string }\n */\nfunction trimCharacter (str, char) {\n  let start = 0;\n  let end = str.length;\n  while (start < end && str[start] === char) { ++start; }\n  while (end > start && str[end - 1] === char) { --end; }\n  return (start > 0 || end < str.length)\n    ? str.substring(start, end)\n    : str;\n}\n\n/**\n * Get a nested property from an object.\n *\n * @param   { object }   obj  The object to query for the value.\n * @param   { string[] } path The path to the property.\n * @returns { any }\n */\nfunction get (obj, path) {\n  for (const key of path) {\n    if (!obj) { return undefined; }\n    obj = obj[key];\n  }\n  return obj;\n}\n\n/**\n * Set a nested property of an object.\n *\n * @param { object }   obj   The object to modify.\n * @param { string[] } path  The path to the property.\n * @param { any }      value The value to set.\n */\nfunction set (obj, path, value) {\n  const valueKey = path.pop();\n  for (const key of path) {\n    let nested = obj[key];\n    if (!nested) {\n      nested = {};\n      obj[key] = nested;\n    }\n    obj = nested;\n  }\n  obj[valueKey] = value;\n}\n\nmodule.exports = {\n  get: get,\n  limitedDepthRecursive: limitedDepthRecursive,\n  numberToLetterSequence: numberToLetterSequence,\n  numberToRoman: numberToRoman,\n  set: set,\n  splitClassesAndIds: splitClassesAndIds,\n  splitSelector: splitSelector,\n  trimCharacter: trimCharacter\n};\n"]},"metadata":{},"sourceType":"script"}