{"ast":null,"code":"/* eslint-disable max-classes-per-file */\nconst {\n  InlineTextBuilder\n} = require('./inline-text-builder');\n\nclass StackItem {\n  constructor(next = null) {\n    this.next = next;\n  }\n\n  getRoot() {\n    return this.next ? this.next : this;\n  }\n\n}\n\nclass BlockStackItem extends StackItem {\n  constructor(options, next = null, leadingLineBreaks = 1, maxLineLength = undefined) {\n    super(next);\n    this.leadingLineBreaks = leadingLineBreaks;\n    this.inlineTextBuilder = new InlineTextBuilder(options, maxLineLength);\n    this.rawText = '';\n    this.stashedLineBreaks = 0;\n    this.isPre = next && next.isPre;\n  }\n\n}\n\nclass TableStackItem extends StackItem {\n  constructor(next = null) {\n    super(next);\n    this.rows = [];\n    this.isPre = next && next.isPre;\n  }\n\n}\n\nclass TableRowStackItem extends StackItem {\n  constructor(next = null) {\n    super(next);\n    this.cells = [];\n    this.isPre = next && next.isPre;\n  }\n\n}\n\nclass TableCellStackItem extends StackItem {\n  constructor(options, next = null, maxColumnWidth = undefined) {\n    super(next);\n    this.inlineTextBuilder = new InlineTextBuilder(options, maxColumnWidth);\n    this.rawText = '';\n    this.stashedLineBreaks = 0;\n    this.isPre = next && next.isPre;\n  }\n\n}\n\nclass TransformerStackItem extends StackItem {\n  constructor(next = null, transform) {\n    super(next);\n    this.transform = transform;\n  }\n\n}\n\nmodule.exports = {\n  BlockStackItem: BlockStackItem,\n  StackItem: StackItem,\n  TableCellStackItem: TableCellStackItem,\n  TableRowStackItem: TableRowStackItem,\n  TableStackItem: TableStackItem,\n  TransformerStackItem: TransformerStackItem\n};","map":{"version":3,"sources":["D:/Documents/HKII_2020_2021/Tieu_Luan_CN/code/tlcn/client/node_modules/html-to-text/lib/stack-item.js"],"names":["InlineTextBuilder","require","StackItem","constructor","next","getRoot","BlockStackItem","options","leadingLineBreaks","maxLineLength","undefined","inlineTextBuilder","rawText","stashedLineBreaks","isPre","TableStackItem","rows","TableRowStackItem","cells","TableCellStackItem","maxColumnWidth","TransformerStackItem","transform","module","exports"],"mappings":"AAAA;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAwBC,OAAO,CAAC,uBAAD,CAArC;;AAGA,MAAMC,SAAN,CAAgB;AACdC,EAAAA,WAAW,CAAEC,IAAI,GAAG,IAAT,EAAe;AAAE,SAAKA,IAAL,GAAYA,IAAZ;AAAmB;;AAE/CC,EAAAA,OAAO,GAAI;AAAE,WAAQ,KAAKD,IAAN,GAAc,KAAKA,IAAnB,GAA0B,IAAjC;AAAwC;;AAHvC;;AAMhB,MAAME,cAAN,SAA6BJ,SAA7B,CAAuC;AACrCC,EAAAA,WAAW,CAAEI,OAAF,EAAWH,IAAI,GAAG,IAAlB,EAAwBI,iBAAiB,GAAG,CAA5C,EAA+CC,aAAa,GAAGC,SAA/D,EAA0E;AACnF,UAAMN,IAAN;AACA,SAAKI,iBAAL,GAAyBA,iBAAzB;AACA,SAAKG,iBAAL,GAAyB,IAAIX,iBAAJ,CAAsBO,OAAtB,EAA+BE,aAA/B,CAAzB;AACA,SAAKG,OAAL,GAAe,EAAf;AACA,SAAKC,iBAAL,GAAyB,CAAzB;AACA,SAAKC,KAAL,GAAaV,IAAI,IAAIA,IAAI,CAACU,KAA1B;AACD;;AARoC;;AAWvC,MAAMC,cAAN,SAA6Bb,SAA7B,CAAuC;AACrCC,EAAAA,WAAW,CAAEC,IAAI,GAAG,IAAT,EAAe;AACxB,UAAMA,IAAN;AACA,SAAKY,IAAL,GAAY,EAAZ;AACA,SAAKF,KAAL,GAAaV,IAAI,IAAIA,IAAI,CAACU,KAA1B;AACD;;AALoC;;AAQvC,MAAMG,iBAAN,SAAgCf,SAAhC,CAA0C;AACxCC,EAAAA,WAAW,CAAEC,IAAI,GAAG,IAAT,EAAe;AACxB,UAAMA,IAAN;AACA,SAAKc,KAAL,GAAa,EAAb;AACA,SAAKJ,KAAL,GAAaV,IAAI,IAAIA,IAAI,CAACU,KAA1B;AACD;;AALuC;;AAQ1C,MAAMK,kBAAN,SAAiCjB,SAAjC,CAA2C;AACzCC,EAAAA,WAAW,CAAEI,OAAF,EAAWH,IAAI,GAAG,IAAlB,EAAwBgB,cAAc,GAAGV,SAAzC,EAAoD;AAC7D,UAAMN,IAAN;AACA,SAAKO,iBAAL,GAAyB,IAAIX,iBAAJ,CAAsBO,OAAtB,EAA+Ba,cAA/B,CAAzB;AACA,SAAKR,OAAL,GAAe,EAAf;AACA,SAAKC,iBAAL,GAAyB,CAAzB;AACA,SAAKC,KAAL,GAAaV,IAAI,IAAIA,IAAI,CAACU,KAA1B;AACD;;AAPwC;;AAU3C,MAAMO,oBAAN,SAAmCnB,SAAnC,CAA6C;AAC3CC,EAAAA,WAAW,CAAEC,IAAI,GAAG,IAAT,EAAekB,SAAf,EAA0B;AACnC,UAAMlB,IAAN;AACA,SAAKkB,SAAL,GAAiBA,SAAjB;AACD;;AAJ0C;;AAO7CC,MAAM,CAACC,OAAP,GAAiB;AACflB,EAAAA,cAAc,EAAEA,cADD;AAEfJ,EAAAA,SAAS,EAAEA,SAFI;AAGfiB,EAAAA,kBAAkB,EAAEA,kBAHL;AAIfF,EAAAA,iBAAiB,EAAEA,iBAJJ;AAKfF,EAAAA,cAAc,EAAEA,cALD;AAMfM,EAAAA,oBAAoB,EAAEA;AANP,CAAjB","sourcesContent":["/* eslint-disable max-classes-per-file */\n\nconst { InlineTextBuilder } = require('./inline-text-builder');\n\n\nclass StackItem {\n  constructor (next = null) { this.next = next; }\n\n  getRoot () { return (this.next) ? this.next : this; }\n}\n\nclass BlockStackItem extends StackItem {\n  constructor (options, next = null, leadingLineBreaks = 1, maxLineLength = undefined) {\n    super(next);\n    this.leadingLineBreaks = leadingLineBreaks;\n    this.inlineTextBuilder = new InlineTextBuilder(options, maxLineLength);\n    this.rawText = '';\n    this.stashedLineBreaks = 0;\n    this.isPre = next && next.isPre;\n  }\n}\n\nclass TableStackItem extends StackItem {\n  constructor (next = null) {\n    super(next);\n    this.rows = [];\n    this.isPre = next && next.isPre;\n  }\n}\n\nclass TableRowStackItem extends StackItem {\n  constructor (next = null) {\n    super(next);\n    this.cells = [];\n    this.isPre = next && next.isPre;\n  }\n}\n\nclass TableCellStackItem extends StackItem {\n  constructor (options, next = null, maxColumnWidth = undefined) {\n    super(next);\n    this.inlineTextBuilder = new InlineTextBuilder(options, maxColumnWidth);\n    this.rawText = '';\n    this.stashedLineBreaks = 0;\n    this.isPre = next && next.isPre;\n  }\n}\n\nclass TransformerStackItem extends StackItem {\n  constructor (next = null, transform) {\n    super(next);\n    this.transform = transform;\n  }\n}\n\nmodule.exports = {\n  BlockStackItem: BlockStackItem,\n  StackItem: StackItem,\n  TableCellStackItem: TableCellStackItem,\n  TableRowStackItem: TableRowStackItem,\n  TableStackItem: TableStackItem,\n  TransformerStackItem: TransformerStackItem,\n};\n"]},"metadata":{},"sourceType":"script"}