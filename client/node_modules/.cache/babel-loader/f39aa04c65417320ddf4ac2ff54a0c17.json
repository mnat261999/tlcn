{"ast":null,"code":"// eslint-disable-next-line no-unused-vars\nconst {\n  InlineTextBuilder\n} = require('./inline-text-builder'); // eslint-disable-next-line import/no-unassigned-import\n\n\nrequire('./typedefs');\n\nfunction charactersToCodes(str) {\n  return [...str].map(c => '\\\\u' + c.charCodeAt(0).toString(16).padStart(4, '0')).join('');\n}\n/**\n * Helps to handle HTML whitespaces.\n *\n * @class WhitespaceProcessor\n */\n\n\nclass WhitespaceProcessor {\n  /**\n   * Creates an instance of WhitespaceProcessor.\n   *\n   * @param { Options } options    HtmlToText options.\n   * @memberof WhitespaceProcessor\n   */\n  constructor(options) {\n    this.whitespaceChars = options.preserveNewlines ? options.whitespaceCharacters.replace(/\\n/g, '') : options.whitespaceCharacters;\n    const whitespaceCodes = charactersToCodes(this.whitespaceChars);\n    this.leadingWhitespaceRe = new RegExp(`^[${whitespaceCodes}]`);\n    this.trailingWhitespaceRe = new RegExp(`[${whitespaceCodes}]$`);\n    this.allWhitespaceOrEmptyRe = new RegExp(`^[${whitespaceCodes}]*$`);\n\n    if (options.preserveNewlines) {\n      const wordOrNewlineRe = new RegExp(`\\n|[^\\n${whitespaceCodes}]+`, 'gm');\n      /**\n       * Shrink whitespaces and wrap text, add to the builder.\n       *\n       * @param { string }                  text              Input text.\n       * @param { InlineTextBuilder }       inlineTextBuilder A builder to receive processed text.\n       * @param { (str: string) => string } [ transform ]     A transform to be applied to words.\n       */\n\n      this.shrinkWrapAdd = function (text, inlineTextBuilder, transform = str => str) {\n        if (!text) {\n          return;\n        }\n\n        const previouslyStashedSpace = inlineTextBuilder.stashedSpace;\n        let anyMatch = false;\n        let m = wordOrNewlineRe.exec(text);\n\n        if (m) {\n          anyMatch = true;\n\n          if (m[0] === '\\n') {\n            inlineTextBuilder.startNewLine();\n          } else if (previouslyStashedSpace || this.testLeadingWhitespace(text)) {\n            inlineTextBuilder.pushWord(transform(m[0]));\n          } else {\n            inlineTextBuilder.concatWord(transform(m[0]));\n          }\n\n          while ((m = wordOrNewlineRe.exec(text)) !== null) {\n            if (m[0] === '\\n') {\n              inlineTextBuilder.startNewLine();\n            } else {\n              inlineTextBuilder.pushWord(transform(m[0]));\n            }\n          }\n        }\n\n        inlineTextBuilder.stashedSpace = previouslyStashedSpace && !anyMatch || this.testTrailingWhitespace(text); // No need to stash a space in case last added item was a new line,\n        // but that won't affect anything later anyway.\n      };\n    } else {\n      const wordRe = new RegExp(`[^${whitespaceCodes}]+`, 'g');\n\n      this.shrinkWrapAdd = function (text, inlineTextBuilder, transform = str => str) {\n        if (!text) {\n          return;\n        }\n\n        const previouslyStashedSpace = inlineTextBuilder.stashedSpace;\n        let anyMatch = false;\n        let m = wordRe.exec(text);\n\n        if (m) {\n          anyMatch = true;\n\n          if (previouslyStashedSpace || this.testLeadingWhitespace(text)) {\n            inlineTextBuilder.pushWord(transform(m[0]));\n          } else {\n            inlineTextBuilder.concatWord(transform(m[0]));\n          }\n\n          while ((m = wordRe.exec(text)) !== null) {\n            inlineTextBuilder.pushWord(transform(m[0]));\n          }\n        }\n\n        inlineTextBuilder.stashedSpace = previouslyStashedSpace && !anyMatch || this.testTrailingWhitespace(text);\n      };\n    }\n  }\n  /**\n   * Test whether the given text starts with HTML whitespace character.\n   *\n   * @param   { string }  text  The string to test.\n   * @returns { boolean }\n   */\n\n\n  testLeadingWhitespace(text) {\n    return this.leadingWhitespaceRe.test(text);\n  }\n  /**\n   * Test whether the given text ends with HTML whitespace character.\n   *\n   * @param   { string }  text  The string to test.\n   * @returns { boolean }\n   */\n\n\n  testTrailingWhitespace(text) {\n    return this.trailingWhitespaceRe.test(text);\n  }\n  /**\n   * Test whether the given text contains any non-whitespace characters.\n   *\n   * @param   { string }  text  The string to test.\n   * @returns { boolean }\n   */\n\n\n  testContainsWords(text) {\n    return !this.allWhitespaceOrEmptyRe.test(text);\n  }\n\n}\n\nmodule.exports = {\n  WhitespaceProcessor: WhitespaceProcessor\n};","map":{"version":3,"sources":["D:/Documents/HKII_2020_2021/Tieu_Luan_CN/code/tlcn/client/node_modules/html-to-text/lib/whitespace-processor.js"],"names":["InlineTextBuilder","require","charactersToCodes","str","map","c","charCodeAt","toString","padStart","join","WhitespaceProcessor","constructor","options","whitespaceChars","preserveNewlines","whitespaceCharacters","replace","whitespaceCodes","leadingWhitespaceRe","RegExp","trailingWhitespaceRe","allWhitespaceOrEmptyRe","wordOrNewlineRe","shrinkWrapAdd","text","inlineTextBuilder","transform","previouslyStashedSpace","stashedSpace","anyMatch","m","exec","startNewLine","testLeadingWhitespace","pushWord","concatWord","testTrailingWhitespace","wordRe","test","testContainsWords","module","exports"],"mappings":"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","sourcesContent":["\n// eslint-disable-next-line no-unused-vars\nconst { InlineTextBuilder } = require('./inline-text-builder');\n\n// eslint-disable-next-line import/no-unassigned-import\nrequire('./typedefs');\n\n\nfunction charactersToCodes (str) {\n  return [...str]\n    .map(c => '\\\\u' + c.charCodeAt(0).toString(16).padStart(4, '0'))\n    .join('');\n}\n\n/**\n * Helps to handle HTML whitespaces.\n *\n * @class WhitespaceProcessor\n */\nclass WhitespaceProcessor {\n\n  /**\n   * Creates an instance of WhitespaceProcessor.\n   *\n   * @param { Options } options    HtmlToText options.\n   * @memberof WhitespaceProcessor\n   */\n  constructor (options) {\n    this.whitespaceChars = (options.preserveNewlines)\n      ? options.whitespaceCharacters.replace(/\\n/g, '')\n      : options.whitespaceCharacters;\n    const whitespaceCodes = charactersToCodes(this.whitespaceChars);\n    this.leadingWhitespaceRe = new RegExp(`^[${whitespaceCodes}]`);\n    this.trailingWhitespaceRe = new RegExp(`[${whitespaceCodes}]$`);\n    this.allWhitespaceOrEmptyRe = new RegExp(`^[${whitespaceCodes}]*$`);\n\n    if (options.preserveNewlines) {\n\n      const wordOrNewlineRe = new RegExp(`\\n|[^\\n${whitespaceCodes}]+`, 'gm');\n\n      /**\n       * Shrink whitespaces and wrap text, add to the builder.\n       *\n       * @param { string }                  text              Input text.\n       * @param { InlineTextBuilder }       inlineTextBuilder A builder to receive processed text.\n       * @param { (str: string) => string } [ transform ]     A transform to be applied to words.\n       */\n      this.shrinkWrapAdd = function (text, inlineTextBuilder, transform = (str => str)) {\n        if (!text) { return; }\n        const previouslyStashedSpace = inlineTextBuilder.stashedSpace;\n        let anyMatch = false;\n        let m = wordOrNewlineRe.exec(text);\n        if (m) {\n          anyMatch = true;\n          if (m[0] === '\\n') {\n            inlineTextBuilder.startNewLine();\n          } else if (previouslyStashedSpace || this.testLeadingWhitespace(text)) {\n            inlineTextBuilder.pushWord(transform(m[0]));\n          } else {\n            inlineTextBuilder.concatWord(transform(m[0]));\n          }\n          while ((m = wordOrNewlineRe.exec(text)) !== null) {\n            if (m[0] === '\\n') {\n              inlineTextBuilder.startNewLine();\n            } else {\n              inlineTextBuilder.pushWord(transform(m[0]));\n            }\n          }\n        }\n        inlineTextBuilder.stashedSpace = (previouslyStashedSpace && !anyMatch) || (this.testTrailingWhitespace(text));\n        // No need to stash a space in case last added item was a new line,\n        // but that won't affect anything later anyway.\n      };\n\n    } else {\n\n      const wordRe = new RegExp(`[^${whitespaceCodes}]+`, 'g');\n\n      this.shrinkWrapAdd = function (text, inlineTextBuilder, transform = (str => str)) {\n        if (!text) { return; }\n        const previouslyStashedSpace = inlineTextBuilder.stashedSpace;\n        let anyMatch = false;\n        let m = wordRe.exec(text);\n        if (m) {\n          anyMatch = true;\n          if (previouslyStashedSpace || this.testLeadingWhitespace(text)) {\n            inlineTextBuilder.pushWord(transform(m[0]));\n          } else {\n            inlineTextBuilder.concatWord(transform(m[0]));\n          }\n          while ((m = wordRe.exec(text)) !== null) {\n            inlineTextBuilder.pushWord(transform(m[0]));\n          }\n        }\n        inlineTextBuilder.stashedSpace = (previouslyStashedSpace && !anyMatch) || this.testTrailingWhitespace(text);\n      };\n\n    }\n  }\n\n  /**\n   * Test whether the given text starts with HTML whitespace character.\n   *\n   * @param   { string }  text  The string to test.\n   * @returns { boolean }\n   */\n  testLeadingWhitespace (text) {\n    return this.leadingWhitespaceRe.test(text);\n  }\n\n  /**\n   * Test whether the given text ends with HTML whitespace character.\n   *\n   * @param   { string }  text  The string to test.\n   * @returns { boolean }\n   */\n  testTrailingWhitespace (text) {\n    return this.trailingWhitespaceRe.test(text);\n  }\n\n  /**\n   * Test whether the given text contains any non-whitespace characters.\n   *\n   * @param   { string }  text  The string to test.\n   * @returns { boolean }\n   */\n  testContainsWords (text) {\n    return !this.allWhitespaceOrEmptyRe.test(text);\n  }\n\n}\n\nmodule.exports = { WhitespaceProcessor: WhitespaceProcessor };\n"]},"metadata":{},"sourceType":"script"}